Feature('Enter claim amount and submit claim')

Scenario('I can fill in Organisation details for Claimant, Defendant, Claim amount and Submit the claim @legal @quick', function * (I, legalUserSteps, legalDefendantSteps, legalAmountClaimSteps) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalUserSteps.enterClaimantServiceDetails()
  legalUserSteps.enterClaimantTypeOrganisation()
  I.see('Claimant: Abc corporation')
  legalUserSteps.enterClaimantAddress()
  legalUserSteps.noAdditionalClaimant()
  legalDefendantSteps.enterDefendantTypeOrganisation()
  I.see('Defendant: Def corporation')
  legalDefendantSteps.enterDefendantAddress()
  legalDefendantSteps.enterDefendantRepsCompanyName()
  I.see("Defendant's legal representative: Defendant Rep Ltd")
  legalDefendantSteps.enterDefendantRepsAddress()
  legalDefendantSteps.noAnotherDefendant()
  legalAmountClaimSteps.addRangeDetailsAndVerifyOrganisationDetails()
  let dateCheck = yield I.grabTextFrom('div.confirmation-detail')
  legalAmountClaimSteps.verifySubmittedPage(userEmail, dateCheck)
})

Scenario('I can fill in individual details for Claimant, Defendant, Claim amount and Submit the claim @legal @quick', function * (I, legalUserSteps, legalDefendantSteps, legalAmountClaimSteps) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalUserSteps.enterClaimantServiceDetails()
  legalUserSteps.enterClaimantTypeIndividual()
  I.see('Claimant: Mr Benugo')
  legalUserSteps.enterClaimantAddress()
  legalUserSteps.noAdditionalClaimant()
  legalDefendantSteps.enterDefendantTypeIndividual()
  I.see('Defendant: Mr Pret')
  legalDefendantSteps.enterDefendantAddress()
  legalDefendantSteps.noDefendantCompanyName()
  legalDefendantSteps.defendantAddressAsServiceAddress()
  legalDefendantSteps.noAnotherDefendant()
  legalAmountClaimSteps.addRangeDetailsAndVerifyIndividualDetails()
  let dateCheck = yield I.grabTextFrom('div.confirmation-detail')
  legalAmountClaimSteps.verifySubmittedPage(userEmail, dateCheck)
  const pdfUrl = yield I.grabAttributeFrom('ol li a', 'href')
  const sessionCookie = yield I.grabCookie('T2_SESSION_ID')
  yield I.downloadPDF(pdfUrl, sessionCookie.value)
})

Scenario('I can fill in Organisation details for Claimant, Defendant and no Claim amount details @legal', function * (I, legalUserSteps, legalDefendantSteps, legalAmountClaimSteps) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalUserSteps.enterClaimantServiceDetails()
  legalUserSteps.enterClaimantTypeOrganisation()
  I.see('Claimant: Abc corporation')
  legalUserSteps.enterClaimantAddress()
  legalUserSteps.noAdditionalClaimant()
  legalDefendantSteps.enterDefendantTypeOrganisation()
  I.see('Defendant: Def corporation')
  legalDefendantSteps.enterDefendantAddress()
  legalDefendantSteps.enterDefendantRepsCompanyName()
  I.see("Defendant's legal representative: Defendant Rep Ltd")
  legalDefendantSteps.enterDefendantRepsAddress()
  legalDefendantSteps.noAnotherDefendant()
  legalAmountClaimSteps.addNoClaimDataAndVerifyData()
})

Scenario('Check personal injury more than 1000 @legal', function * (I, legalUserSteps, legalAmountClaimSteps) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalAmountClaimSteps.personalInjuryMoreThan1000()
  I.seeInCurrentUrl('housing-disrepair')
})

Scenario('Check housing disrepair more than 1000 @legal', function * (I, legalUserSteps, legalAmountClaimSteps) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalAmountClaimSteps.housingDisrepairMoreThan1000()
  I.seeInCurrentUrl('summarise-the-claim')
})

Scenario('Check housing disrepair less than 1000 and no other damages @legal', function * (I, legalUserSteps, legalAmountClaimSteps) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalAmountClaimSteps.housingDisrepairLessThan1000AndNoOtherDamages()
  I.seeInCurrentUrl('summarise-the-claim')
})

Scenario('Check higher value in amount claim Page @legal', function * (I, legalUserSteps, legalAmountClaimSteps) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalAmountClaimSteps.enterOnlyHigherValueAmount()
  I.seeInCurrentUrl('total')
})

Scenario('Check Error Messages in personal claim page @legal', function * (I, legalUserSteps, legalPersonalInjuryPage) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalPersonalInjuryPage.open()
  legalPersonalInjuryPage.checkMandatoryErrorMessage()
  legalPersonalInjuryPage.checkMandatoryErrorMessageForAmount()
})

Scenario('Check Error Messages in housing disrepair page @legal', function * (I, legalUserSteps, legalHousingDisrepairPage) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalHousingDisrepairPage.open()
  legalHousingDisrepairPage.checkMandatoryErrorMessage()
  legalHousingDisrepairPage.checkMandatoryErrorMessageForAmounts()
})

Scenario('Check Error Messages in summarise the claim page @legal', function * (I, legalUserSteps, legalSummariseTheClaimPage) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalSummariseTheClaimPage.open()
  legalSummariseTheClaimPage.checkMandatoryErrorMessage()
  legalSummariseTheClaimPage.checkForBlankErrorMessage()
})

Scenario('Check Error Messages in amount claim page @legal', function * (I, legalUserSteps, legalAmountPage) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalAmountPage.open()
  legalAmountPage.checkMandatoryErrorMessage()
  legalAmountPage.checkForBlankErrorMessage()
  legalAmountPage.checkErrorMessageForLowerValueOnly()
  legalAmountPage.checkErrorMessageForSelectingBothHigherAndCanNotCheckbox()
})

Scenario('Check Error Messages in statement of truth page @legal', function * (I, legalUserSteps, legalStatementOfTruthPage) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalUserSteps.enterYourOrganisationNamePage()
  legalStatementOfTruthPage.open()
  legalStatementOfTruthPage.checkMandatoryErrorMessage()
  legalStatementOfTruthPage.checkForBlankErrorMessage()
  legalStatementOfTruthPage.checkForIndividualMessage()
})

Scenario('Check Error Messages in pay by account page @legal', function * (I, legalUserSteps, legalAmountClaimSteps, legalAmountPage, legalPayByAccountPage) {
  const userEmail = yield I.createSolicitorUser()
  legalUserSteps.loginAndStartClaim(userEmail)
  legalUserSteps.enterYourOrganisationNamePage()
  legalAmountPage.open()
  legalAmountClaimSteps.enterRangeOfTheClaim()
  legalPayByAccountPage.open()
  legalPayByAccountPage.checkMandatoryErrorMessage()
  legalPayByAccountPage.checkForBlankErrorMessage()
  legalPayByAccountPage.checkForInvalidReference()
})
